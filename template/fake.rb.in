# frozen_string_literal: true
# shareable_constant_value: literal
<%
arg = {}
while /\A(\w+)=(.*)/ =~ ARGV[0]
  arg[$1] = $2
  arg[$1].tr!(File::ALT_SEPARATOR, File::SEPARATOR) if File::ALT_SEPARATOR
  ARGV.shift
end
consts = {}
if inc = arg['i']
  puts "Extracting constant data from #{inc}" if $VERBOSE
  src = inc == '-' ? STDIN.read : File.read(inc)
  src.scan(/\b(?:static\s+)?const\s+(?:\w+\s+)+
    ruby_(\w+)(?:\[\])?\s*=\s*
    ((?:"(?:\\.|[^\"\\])*+"\s*+)*+|[^{};]+)(?=;)/mx) do
    n, v = $1, $2
    puts "  #{n}: #{v.inspect}" if $VERBOSE
    consts[n] = eval(v.tr_s("\n", " ").gsub(/#/, '\\#'))
  end
end
arg['versions'] = version = {}
puts "Extracting ruby constants" if $VERBOSE
File.read(File.join(arg['srcdir'], 'version.c')).
  scan(/rb_define_global_const\("(RUBY_\w+)",[^;]*?\bMK(?:INT|(STR))\(([^()]*)\)/m) do |n, s, v|
  v = arg[v] || consts[v] || (s ? v : 0)
  puts "  #{n}: #{v.inspect}" if $VERBOSE
  version[n] = v
end
arg['RUBY_DESCRIPTION_WITH_RJIT'] = consts.fetch('description_with_rjit', 'description_with_rjit')
arg['RUBY_DESCRIPTION_WITH_YJIT'] = consts.fetch('description_with_yjit', 'description_with_yjit')
%>baseruby="<%=arg['BASERUBY']%>"
_\
=begin
_=
ruby="${RUBY-$baseruby}"
case "$ruby" in "echo "*) $ruby; exit $?;; esac
case "$0" in /*) r=-r"$0";; *) r=-r"./$0";; esac
exec $ruby "$r" "$@"
=end
=baseruby
class Object
  remove_const :CROSS_COMPILING if defined?(CROSS_COMPILING)
  CROSS_COMPILING = RUBY_PLATFORM
  constants.grep(/^RUBY_/) {|n| remove_const n}
% arg['versions'].each {|n, v|
  <%=n%> = <%if n=='RUBY_DESCRIPTION' %>case
    when RubyVM.const_defined?(:RJIT) && RubyVM::RJIT.enabled?
      <%=arg['RUBY_DESCRIPTION_WITH_RJIT'].inspect%>
    when RubyVM.const_defined?(:YJIT) && RubyVM::YJIT.enabled?
      <%=arg['RUBY_DESCRIPTION_WITH_YJIT'].inspect%>
    else
      <%=v.inspect%>
    end<%else%><%=v.inspect%><%end%>
% }
end
builddir = File.dirname(File.expand_path(__FILE__))
srcdir = "<%=arg['srcdir']%>"
top_srcdir = File.realpath(srcdir, builddir)
fake = File.join(top_srcdir, "tool/fake.rb")
eval(File.binread(fake), nil, fake)
ropt = "-r#{__FILE__}"
["RUBYOPT"].each do |flag|
  opt = ENV[flag]
  opt = opt ? ([ropt] | opt.b.split(/\s+/)).join(" ") : ropt
  ENV[flag] = opt
end
