name: Windows
on:
  push:
    paths-ignore:
      - 'doc/**'
      - '**.md'
      - '**.rdoc'
      - '**/.document'
      - '**.[1-8]'
      - '**.ronn'
  pull_request:
    paths-ignore:
      - 'doc/**'
      - '**.md'
      - '**.rdoc'
      - '**/.document'
      - '**.[1-8]'
      - '**.ronn'

concurrency:
  group: ${{ github.workflow }} / ${{ startsWith(github.event_name, 'pull') && github.ref_name || github.sha }}
  cancel-in-progress: ${{ startsWith(github.event_name, 'pull') }}

jobs:
  mswin:
    strategy:
      matrix:
        include:
          - vs: 2019
          - vs: 2022
      fail-fast: false
    runs-on: windows-${{ matrix.vs < 2022 && '2019' || matrix.vs }}
    if: ${{ !contains(github.event.head_commit.message, '[DOC]') && !contains(github.event.pull_request.labels.*.name, 'Documentation') }}
    name: VisualStudio ${{ matrix.vs }}
    env:
      GITPULLOPTIONS: --no-tags origin ${{github.ref}}
      PATCH: C:\msys64\usr\bin\patch.exe
      OS_VER: windows-${{ matrix.vs < 2022 && '2019' || matrix.vs }}
    steps:
      - run: md build
        working-directory:
      - uses: msys2/setup-msys2@v2
        id: setup-msys2
        with:
          update: true
          install: >-
            patch
        if: ${{ env.OS_VER != 'windows-2019' }}
      - name: patch path
        shell: msys2 {0}
        run: echo PATCH=$(cygpath -wa $(command -v patch)) >> $GITHUB_ENV
        if: ${{ steps.setup-msys2.outcome == 'success' }}
      - uses: actions/cache@v3
        with:
          path: C:\vcpkg\downloads
          key: ${{ runner.os }}-vcpkg-download-${{ env.OS_VER }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-download-${{ env.OS_VER }}-
            ${{ runner.os }}-vcpkg-download-
      - uses: actions/cache@v3
        with:
          path: C:\vcpkg\installed
          key: ${{ runner.os }}-vcpkg-installed-${{ matrix.os }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-installed-${{ matrix.os }}-
            ${{ runner.os }}-vcpkg-installed-
      - name: Install libraries with vcpkg
        run: |
          vcpkg --triplet x64-windows install libffi libyaml openssl readline zlib
      - uses: actions/cache@v3
        with:
          path: C:\Users\runneradmin\AppData\Local\Temp\chocolatey
          key: ${{ runner.os }}-chocolatey-${{ env.OS_VER }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-chocolatey-${{ env.OS_VER }}-
            ${{ runner.os }}-chocolatey-
      - name: Install libraries with chocolatey
        run: |
          # Using Choco-Install for retries, but it doesn't detect failures properly
          # if you pass multiple package names in a single command.
          Choco-Install -PackageName winflexbison3
        shell: pwsh
      - name: git config
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
          git config --global advice.detachedHead 0
          git config --global init.defaultBranch garbage
      - uses: actions/checkout@v3
        with:
          path: src
      - uses: actions/cache@v3
        with:
          path: src/.downloaded-cache
          key: downloaded-cache
      - name: setup env
        # %TEMP% is inconsistent with %TMP% and test-all expects they are consistent.
        # https://github.com/actions/virtual-environments/issues/712#issuecomment-613004302
        run: |
          set VS=${{ matrix.vs }}
          set VCVARS=${{ matrix.vcvars }}
          if not "%VCVARS%" == "" goto :vcset
            set VCVARS="C:\Program Files (x86)\Microsoft Visual Studio\%VS%\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
            if not exist %VCVARS% set VCVARS="C:\Program Files\Microsoft Visual Studio\%VS%\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          :vcset
          set | C:\msys64\usr\bin\sort > old.env
          call %VCVARS%
          set TMP=%USERPROFILE%\AppData\Local\Temp
          set TEMP=%USERPROFILE%\AppData\Local\Temp
          set /a TEST_JOBS=(15 * %NUMBER_OF_PROCESSORS% / 10) > nul
          set | C:\msys64\usr\bin\sort > new.env
          C:\msys64\usr\bin\comm -13 old.env new.env >> %GITHUB_ENV%
          del *.env
      - name: compiler version
        run: cl
      - name: link libraries
        run: |
          for %%I in (C:\vcpkg\installed\x64-windows\bin\*.dll) do (
            if not %%~nI == readline mklink %%~nxI %%I
          )
          for %%I in (libcrypto-1_1-x64 libssl-1_1-x64) do (
            ren c:\Windows\System32\%%I.dll %%I.dll_
          )
      - name: Configure
        run: >-
          ../src/win32/configure.bat --disable-install-doc
          --with-opt-dir=C:/vcpkg/installed/x64-windows
      - run: nmake incs
      - run: nmake extract-extlibs
      - run: nmake
        env:
          YACC: win_bison
      - run: nmake test
        timeout-minutes: 5
      - run: nmake test-spec
        timeout-minutes: 10
      - run: nmake test-all
        env:
          RUBY_TESTOPTS: -j${{env.TEST_JOBS}} --job-status=normal
        timeout-minutes: 60
      - uses: k0kubun/action-slack@v2.0.0
        with:
          payload: |
            {
              "ci": "GitHub Actions",
              "env": "VS${{ matrix.vs }} / ${{ matrix.test_task || 'check' }}",
              "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "commit": "${{ github.sha }}",
              "branch": "${{ github.ref }}".split('/').reverse()[0]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SIMPLER_ALERTS_URL }} # ruby-lang slack: ruby/simpler-alerts-bot
        if: ${{ failure() && github.event_name == 'push' }}

  mingw:
    runs-on: windows-2022
    name: ${{ github.workflow }} (${{ matrix.msystem }})
    env:
      MSYSTEM: ${{ matrix.msystem }}
      MSYS2_ARCH: x86_64
      CHOST: "x86_64-w64-mingw32"
      CFLAGS:   "-march=x86-64 -mtune=generic -O3 -pipe -fstack-protector-strong"
      CXXFLAGS: "-march=x86-64 -mtune=generic -O3 -pipe"
      CPPFLAGS: "-D_FORTIFY_SOURCE=2 -D__USE_MINGW_ANSI_STDIO=1 -DFD_SETSIZE=2048"
      LDFLAGS:  "-pipe -fstack-protector-strong"
      UPDATE_UNICODE: "UNICODE_FILES=. UNICODE_PROPERTY_FILES=. UNICODE_AUXILIARY_FILES=. UNICODE_EMOJI_FILES=."
      GITPULLOPTIONS: --no-tags origin ${{github.ref}}
    strategy:
      matrix:
        include:
          # To mitigate flakiness of MinGW CI, we test only one runtime that newer MSYS2 uses.
          - msystem: "UCRT64"
            base_ruby: head
            test_task: "check"
            test-all-opts: "--name=!/TestObjSpace#test_reachable_objects_during_iteration/"
      fail-fast: false
    if: ${{ !contains(github.event.head_commit.message, '[DOC]') && !contains(github.event.pull_request.labels.*.name, 'Documentation') }}
    steps:
      - run: mkdir build
        working-directory:
      - name: git config
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
          git config --global advice.detachedHead 0
          git config --global init.defaultBranch garbage
      - uses: actions/checkout@v3
        with:
          path: src
      - uses: actions/cache@v3
        with:
          path: src/.downloaded-cache
          key: downloaded-cache
      - name: Set up Ruby & MSYS2
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.base_ruby }}
      - name: set env
        run: |
          echo "GNUMAKEFLAGS=-j$((2 * NUMBER_OF_PROCESSORS))" >> $GITHUB_ENV
        shell: sh

      - name: where check
        run: |
          # show where
          mv /c/Windows/System32/libcrypto-1_1-x64.dll /c/Windows/System32/libcrypto-1_1-x64.dll_
          mv /c/Windows/System32/libssl-1_1-x64.dll    /c/Windows/System32/libssl-1_1-x64.dll_
          result=true
          for e in gcc.exe ragel.exe make.exe bison.exe libcrypto-1_1-x64.dll libssl-1_1-x64.dll; do
            echo '##['group']'$'\033[93m'$e$'\033[m'
            where $e || result=false
            echo '##['endgroup']'
          done
          $result
        shell: sh

      - name: version check
        run: |
          # show version
          result=true
          for e in gcc ragel make bison "openssl version"; do
            case "$e" in *" "*) ;; *) e="$e --version";; esac
            echo '##['group']'$'\033[93m'$e$'\033[m'
            $e || result=false
            echo '##['endgroup']'
          done
          $result
        shell: sh

      - name: autogen
        run: |
          ./autogen.sh
        working-directory: src
        shell: sh

      - name: configure
        run: >
          ../src/configure --disable-install-doc --prefix=/.
          --build=$CHOST --host=$CHOST --target=$CHOST
        shell: sh

      - name: update
        run: |
          make incs

      - name: download gems
        run: |
          make update-gems

      - name: make all
        timeout-minutes: 30
        run: |
          make

      - run: make leaked-globals

      - name: make install
        run: |
          make DESTDIR=../install install-nodoc

      - name: test
        timeout-minutes: 5
        run: |
          make test
        if: ${{matrix.test_task == 'check' || matrix.test_task == 'test'}}

      - name: test-all
        timeout-minutes: 45
        run: |
          # Actions uses UTF8, causes test failures, similar to normal OS setup
          chcp.com 437
          make ${{ StartsWith(matrix.test_task, 'test/') && matrix.test_task || 'test-all' }}
        env:
          RUBY_TESTOPTS: >-
            --retry --job-status=normal --show-skip --timeout-scale=1.5
            ${{ matrix.test-all-opts }}
          BUNDLER_VERSION:
        if: ${{matrix.test_task == 'check' || matrix.test_task == 'test-all' || StartsWith(matrix.test_task, 'test/')}}

      - name: test-spec
        timeout-minutes: 10
        run: |
          make ${{ StartsWith(matrix.test_task, 'spec/') && matrix.test_task || 'test-spec' }}
        if: ${{matrix.test_task == 'check' || matrix.test_task == 'test-spec' || StartsWith(matrix.test_task, 'spec/')}}

      - uses: k0kubun/action-slack@v2.0.0
        with:
          payload: |
            {
              "ci": "GitHub Actions",
              "env": "${{ github.workflow }} ${{ matrix.msystem }} / ${{ matrix.test_task }}",
              "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "commit": "${{ github.sha }}",
              "branch": "${{ github.ref }}".split('/').reverse()[0]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SIMPLER_ALERTS_URL }} # ruby-lang slack: ruby/simpler-alerts-bot
        if: ${{ failure() && github.event_name == 'push' }}

defaults:
  run:
    working-directory: build
    shell: cmd
