name: Compilations

on:
  push:
    paths-ignore:
      - 'doc/**'
      - '**.md'
      - '**.rdoc'
  pull_request:
    paths-ignore:
      - 'doc/**'
      - '**.md'
      - '**.rdoc'

concurrency:
  group: ${{ github.workflow }} / ${{ startsWith(github.event_name, 'pull') && github.ref_name || github.sha }}
  cancel-in-progress: ${{ startsWith(github.event_name, 'pull') }}

# GitHub actions does not support YAML anchors.  This creative use of
# environment variables (plus the "echo $GITHUB_ENV" hack) is to reroute that
# restriction.
env:
  default_cc: clang-14
  append_cc: ''

  # -O1 is faster than -O3 in our tests... Majority of time are consumed trying
  # to optimize binaries.  Also GitHub Actions run on relatively modern CPUs
  # compared to, say, GCC 4 or Clang 3.  We don't specify `-march=native`
  # because compilers tend not understand what the CPU is.
  optflags: '-O1'

  # -g0 disables backtraces when SEGV.  Do not set that.
  debugflags: '-ggdb3'

  default_configure: >-
    --enable-debug-env
    --disable-install-doc
    --with-ext=-test-/cxxanyargs,+
  append_configure: >-
    --without-valgrind
    --without-jemalloc
    --without-gmp

  UPDATE_UNICODE: >-
    UNICODE_FILES=.
    UNICODE_PROPERTY_FILES=.
    UNICODE_AUXILIARY_FILES=.
    UNICODE_EMOJI_FILES=.
  CONFIGURE_TTY: never
  GITPULLOPTIONS: --no-tags origin ${{github.ref}}
  RUBY_DEBUG: ci rgengc
  RUBY_TESTOPTS: >-
    -q
    --color=always
    --tty=no

jobs:
  compile:
    strategy:
      fail-fast: false
      matrix:
        env:
          - {}
        entry:
          - { name: gcc-12,    env: { default_cc: gcc-12 } }
          - name: 'gcc-11 LTO'
            container: gcc-11
            env:
              default_cc: 'gcc-11 -flto=auto -ffat-lto-objects'
              optflags: '-O2'
              append_configure: '--disable-shared'
            # check: true
          - name: 'gcc-11 annocheck'
            container: gcc-11
            env:
              # Minimal flags to pass the check.
              default_cc: 'gcc-11 -O2 -fcf-protection -Wa,--generate-missing-build-notes=yes'
              LDFLAGS: '-Wl,-z,now'
              # FIXME: Drop skipping options
              # https://bugs.ruby-lang.org/issues/18061
              # https://sourceware.org/annobin/annobin.html/Test-pie.html
              TEST_ANNOCHECK_OPTS: "--skip-pie"
            check: true
          - { name: clang-15,  env: { default_cc: clang-15 } }
          - { name: clang-14,  env: { default_cc: clang-14 } }
          - name: 'clang-14 LTO'
            container: clang-14
            env:
              default_cc: 'clang-14 -flto=auto'
              optflags: '-O2'
              append_configure: '--disable-shared'
            # check: true

    name: ${{ matrix.entry.name }}
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ruby/ruby-ci-image:${{ matrix.entry.container || matrix.entry.env.default_cc || 'clang-14' }}
      options: --user root
    if: ${{ !contains(github.event.head_commit.message, '[DOC]') && !contains(github.event.pull_request.labels.*.name, 'Documentation') }}
    env: ${{ matrix.entry.env || matrix.env }}
    steps:
      - run: id
        working-directory:
      - run: mkdir build
        working-directory:
      - name: setenv
        run: |
          echo "GNUMAKEFLAGS=-sj$((1 + $(nproc --all)))" >> $GITHUB_ENV
      - uses: actions/checkout@v3
        with:
          path: src
      - uses: actions/cache@v3
        with:
          path: src/.downloaded-cache
          key: downloaded-cache
      - run: ./autogen.sh
        working-directory: src
      - name: Run configure
        run: >
          ../src/configure -C ${default_configure} ${append_configure}
          ${{ !contains(matrix.entry.env.append_configure, '--disable-shared') && '--enable-shared' || '' }}
          --${{
            matrix.entry.crosshost && 'host' || 'with-gcc'
          }}=${{
            matrix.entry.crosshost || '"${default_cc}${append_cc:+ $append_cc}"'
          }}
      - run: make extract-extlibs
      - run: make incs
      - run: make showflags
      - run: make
      - run: make leaked-globals
      - run: make test
      - run: make install
        if: ${{ matrix.entry.check }}
      - run: make test-tool
        if: ${{ matrix.entry.check }}
      - run: make test-all TESTS='-- ruby -ext-'
        if: ${{ matrix.entry.check }}
      - run: make test-spec
        if: ${{ matrix.entry.check }}
      - run: make test-annocheck
        if: ${{ matrix.entry.check && endsWith(matrix.entry.name, 'annocheck') }}

      - uses: k0kubun/action-slack@v2.0.0
        with:
          payload: |
            {
              "ci": "GitHub Actions",
              "env": "${{ github.workflow }} / ${{ matrix.entry.name }}",
              "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "commit": "${{ github.sha }}",
              "branch": "${{ github.ref }}".split('/').reverse()[0]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SIMPLER_ALERTS_URL }} # ruby-lang slack: ruby/simpler-alerts-bot
        if: ${{ failure() && github.event_name == 'push' }}

defaults:
  run:
    working-directory: build
